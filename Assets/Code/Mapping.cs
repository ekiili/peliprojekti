//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Config/Mapping.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mapping"",
    ""maps"": [
        {
            ""name"": ""Diver"",
            ""id"": ""d89c5fea-adaa-4484-a7b0-86741976a6f6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""22e23896-1b54-480a-8ead-f093bba3bd15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d36d5de7-7fee-4456-ab4e-3c58bbd488fc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6b2d0cef-509e-4861-89f9-b6b95744f2e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""381daa23-54f6-4092-bf93-d3909a32b708"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bce13c1c-be8f-4faf-8ec3-8b92d75e58cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e4d0ce2f-4ce3-4163-a29c-59e6be5755e7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ActionMap"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ActionMap"",
            ""bindingGroup"": ""ActionMap"",
            ""devices"": []
        }
    ]
}");
        // Diver
        m_Diver = asset.FindActionMap("Diver", throwIfNotFound: true);
        m_Diver_Move = m_Diver.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Diver
    private readonly InputActionMap m_Diver;
    private List<IDiverActions> m_DiverActionsCallbackInterfaces = new List<IDiverActions>();
    private readonly InputAction m_Diver_Move;
    public struct DiverActions
    {
        private @InputAction m_Wrapper;
        public DiverActions(@InputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Diver_Move;
        public InputActionMap Get() { return m_Wrapper.m_Diver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DiverActions set) { return set.Get(); }
        public void AddCallbacks(IDiverActions instance)
        {
            if (instance == null || m_Wrapper.m_DiverActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DiverActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IDiverActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IDiverActions instance)
        {
            if (m_Wrapper.m_DiverActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDiverActions instance)
        {
            foreach (var item in m_Wrapper.m_DiverActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DiverActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DiverActions @Diver => new DiverActions(this);
    private int m_ActionMapSchemeIndex = -1;
    public InputControlScheme ActionMapScheme
    {
        get
        {
            if (m_ActionMapSchemeIndex == -1) m_ActionMapSchemeIndex = asset.FindControlSchemeIndex("ActionMap");
            return asset.controlSchemes[m_ActionMapSchemeIndex];
        }
    }
    public interface IDiverActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
